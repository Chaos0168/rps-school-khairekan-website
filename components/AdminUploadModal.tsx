'use client'

import React, { useState } from 'react'
import { FiX, FiUpload, FiFile, FiBook, FiFileText, FiAward } from 'react-icons/fi'

interface AdminUploadModalProps {
  isOpen: boolean
  onClose: () => void
  onUpload: (resourceData: any) => void
  classId: number
  termId: number
  subjectId: number
}

export default function AdminUploadModal({
  isOpen,
  onClose,
  onUpload,
  classId,
  termId,
  subjectId
}: AdminUploadModalProps) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: 'syllabus' as 'syllabus' | 'question_paper' | 'quiz',
    file: null as File | null
  })

  const [quizData, setQuizData] = useState({
    duration: 30,
    difficulty: 'Medium' as 'Easy' | 'Medium' | 'Hard',
    questions: [
      {
        question: '',
        options: ['', '', '', ''],
        correctAnswer: 0,
        explanation: ''
      }
    ]
  })

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null
    setFormData(prev => ({
      ...prev,
      file
    }))
  }

  const handleQuizQuestionChange = (questionIndex: number, field: string, value: any) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((q, index) => 
        index === questionIndex ? { ...q, [field]: value } : q
      )
    }))
  }

  const handleQuizOptionChange = (questionIndex: number, optionIndex: number, value: string) => {
    setQuizData(prev => ({
      ...prev,
      questions: prev.questions.map((q, index) => 
        index === questionIndex ? {
          ...q,
          options: q.options.map((opt, optIdx) => optIdx === optionIndex ? value : opt)
        } : q
      )
    }))
  }

  const addQuestion = () => {
    setQuizData(prev => ({
      ...prev,
      questions: [
        ...prev.questions,
        {
          question: '',
          options: ['', '', '', ''],
          correctAnswer: 0,
          explanation: ''
        }
      ]
    }))
  }

  const removeQuestion = (index: number) => {
    if (quizData.questions.length > 1) {
      setQuizData(prev => ({
        ...prev,
        questions: prev.questions.filter((_, i) => i !== index)
      }))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      let fileUrl = ''
      
      // Handle file upload for non-quiz resources
      if (formData.type !== 'quiz' && formData.file) {
        // In a real implementation, you would upload to a cloud service like AWS S3, Cloudinary, etc.
        // For demo purposes, we'll simulate the upload
        const formDataUpload = new FormData()
        formDataUpload.append('file', formData.file)
        
        // Simulate upload delay
        await new Promise(resolve => setTimeout(resolve, 1000))
        
        // In reality, this would be the actual uploaded file URL
        fileUrl = `/files/${classId}/${termId}/${subjectId}/${formData.file.name}`
        
        console.log('File would be uploaded to:', fileUrl)
        console.log('File details:', {
          name: formData.file.name,
          size: formData.file.size,
          type: formData.file.type,
          lastModified: formData.file.lastModified
        })
      }

      const resourceData = {
        id: Date.now(), // In real app, this would be generated by backend
        title: formData.title,
        description: formData.description,
        type: formData.type,
        classId,
        termId,
        subjectId,
        uploadDate: new Date().toISOString().split('T')[0],
        uploadedBy: 'Admin User', // This would come from auth context
        ...(formData.type === 'quiz' ? {
          quiz: {
            id: Date.now(),
            ...quizData,
            title: formData.title,
            description: formData.description,
            totalQuestions: quizData.questions.length
          }
        } : {
          fileUrl,
          fileSize: formData.file?.size,
          fileName: formData.file?.name,
          fileType: formData.file?.type
        })
      }

      onUpload(resourceData)
      
      // Show success message
      alert(`${formData.type === 'quiz' ? 'Quiz' : 'File'} uploaded successfully!${
        formData.type === 'quiz' 
          ? ` Created ${quizData.questions.length} questions.` 
          : ` File: ${formData.file?.name}`
      }`)
      
      // Reset form
      setFormData({
        title: '',
        description: '',
        type: 'syllabus',
        file: null
      })
      setQuizData({
        duration: 30,
        difficulty: 'Medium',
        questions: [
          {
            question: '',
            options: ['', '', '', ''],
            correctAnswer: 0,
            explanation: ''
          }
        ]
      })
      
      onClose()
    } catch (error) {
      console.error('Upload error:', error)
      alert('Upload failed. Please try again.')
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-900">Upload Resource</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <FiX className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          <div className="grid md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Resource Title
              </label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter resource title"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Resource Type
              </label>
              <select
                name="type"
                value={formData.type}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="syllabus">Syllabus</option>
                <option value="question_paper">Question Paper</option>
                <option value="quiz">Quiz</option>
              </select>
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              rows={3}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter resource description"
              required
            />
          </div>

          {/* File Upload for Syllabus and Question Papers */}
          {formData.type !== 'quiz' && (
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Upload File
              </label>
              <div className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                formData.file 
                  ? 'border-green-300 bg-green-50' 
                  : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'
              }`}>
                {formData.file ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-center">
                      <FiFile className="w-12 h-12 text-green-600" />
                    </div>
                    <div>
                      <p className="font-semibold text-green-900">{formData.file.name}</p>
                      <p className="text-sm text-green-700">
                        {(formData.file.size / 1024 / 1024).toFixed(2)} MB â€¢ {formData.file.type}
                      </p>
                    </div>
                    <div className="flex justify-center space-x-4">
                      <label
                        htmlFor="file-upload"
                        className="cursor-pointer bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors inline-flex items-center text-sm"
                      >
                        <FiUpload className="mr-2" />
                        Change File
                      </label>
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, file: null }))}
                        className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                ) : (
                  <div>
                    <FiFile className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <div className="space-y-2">
                      <label
                        htmlFor="file-upload"
                        className="cursor-pointer bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-colors inline-flex items-center"
                      >
                        <FiUpload className="mr-2" />
                        Choose File
                      </label>
                      <p className="text-sm text-gray-500">
                        Supports PDF, DOC, DOCX files up to 10MB
                      </p>
                    </div>
                  </div>
                )}
                <input
                  type="file"
                  onChange={handleFileChange}
                  accept=".pdf,.doc,.docx"
                  className="hidden"
                  id="file-upload"
                  required
                />
              </div>
            </div>
          )}

          {/* Quiz Configuration */}
          {formData.type === 'quiz' && (
            <div className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Duration (minutes)
                  </label>
                  <input
                    type="number"
                    value={quizData.duration}
                    onChange={(e) => setQuizData(prev => ({ ...prev, duration: parseInt(e.target.value) }))}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    min="5"
                    max="180"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Difficulty
                  </label>
                  <select
                    value={quizData.difficulty}
                    onChange={(e) => setQuizData(prev => ({ ...prev, difficulty: e.target.value as 'Easy' | 'Medium' | 'Hard' }))}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="Easy">Easy</option>
                    <option value="Medium">Medium</option>
                    <option value="Hard">Hard</option>
                  </select>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">Questions</h3>
                  <button
                    type="button"
                    onClick={addQuestion}
                    className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors text-sm"
                  >
                    Add Question
                  </button>
                </div>

                <div className="space-y-6">
                  {quizData.questions.map((question, questionIndex) => (
                    <div key={questionIndex} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="font-medium text-gray-900">Question {questionIndex + 1}</h4>
                        {quizData.questions.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeQuestion(questionIndex)}
                            className="text-red-500 hover:text-red-700 text-sm"
                          >
                            Remove
                          </button>
                        )}
                      </div>

                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Question Text
                          </label>
                          <input
                            type="text"
                            value={question.question}
                            onChange={(e) => handleQuizQuestionChange(questionIndex, 'question', e.target.value)}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter question"
                            required
                          />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          {question.options.map((option, optionIndex) => (
                            <div key={optionIndex}>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Option {String.fromCharCode(65 + optionIndex)}
                                {question.correctAnswer === optionIndex && (
                                  <span className="text-green-600 ml-2">(Correct)</span>
                                )}
                              </label>
                              <div className="flex items-center space-x-2">
                                <input
                                  type="radio"
                                  name={`correct-${questionIndex}`}
                                  checked={question.correctAnswer === optionIndex}
                                  onChange={() => handleQuizQuestionChange(questionIndex, 'correctAnswer', optionIndex)}
                                  className="text-green-500"
                                />
                                <input
                                  type="text"
                                  value={option}
                                  onChange={(e) => handleQuizOptionChange(questionIndex, optionIndex, e.target.value)}
                                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder={`Option ${String.fromCharCode(65 + optionIndex)}`}
                                  required
                                />
                              </div>
                            </div>
                          ))}
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Explanation (Optional)
                          </label>
                          <input
                            type="text"
                            value={question.explanation}
                            onChange={(e) => handleQuizQuestionChange(questionIndex, 'explanation', e.target.value)}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Explain the correct answer"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-4 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors flex items-center"
            >
              <FiUpload className="mr-2" />
              Upload Resource
            </button>
          </div>
        </form>
      </div>
    </div>
  )
} 